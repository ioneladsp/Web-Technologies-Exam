import Sequelize from 'sequelize';
import { Meeting, Participant } from './repository.js';

function valid(Model, payload) {
  return Object.entries(Model.tableAttributes).reduce(
    (valid, [name, field]) => {
      if (
        valid &&
        !field._autoGenerated &&
        !field.primaryKey &&
        field.allowNull === false &&
        !payload[name]
      ) {
        valid = false;
      }
      return valid;
    },
    true
  );
}

function where(request) {
  if (request.query.filter) {
    return request.query.filter.split(',').reduce((filter, condition) => {
      let data = condition.split('-');
      filter[data[0]] = { [Sequelize.Op[data[1]]]: data[2] };
      return filter;
    }, {});
  } else {
    return undefined;
  }
}

async function getRecords(Model, request, response) {
  try {
    let records = await Model.findAll({
      where: where(request),
    });

    if (records.length > 0) {
      response.status(200).json(records);
    } else {
      response.status(204).send();
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

//cream un element in colectie
async function postRecord(Model, request, response) {
  try {
    if (valid(Model, request.body)) {
      let record = await Model.create(request.body);
      response
        .status(201)
        .location(
          `http://${request.headers.host}${request.baseUrl}${request.url}${
            request.url.endsWith('/') ? '' : '/'
          }${record.id}`
        )
        .send();
    } else {
      response.status(400).send();
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

async function deleteRecords(Model, request, response) {
  try {
    await Model.truncate();
    response.status(204).send();
  } catch (error) {
    response.status(500).json(error);
  }
}

async function getRecord(Model, request, response) {
  try {
    let record = await Model.findByPk(request.params.id);
    if (record) {
      response.status(200).json(record);
    } else {
      response.status(404).send();
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

async function headRecord(Model, request, response) {
  try {
    response
      .status((await Model.findByPk(request.params.id)) ? 204 : 404)
      .send();
  } catch (error) {
    response.status(500).json(error);
  }
}

async function putRecord(Model, request, response) {
  try {
    let record = await Model.findByPk(request.params.id);
    if (record) {
      if (valid(Model, request.body)) {
        await record.update(request.body);
        response.status(204).send();
      } else {
        response.status(400).send();
      }
    } else {
      response.status(404).send();
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

async function patchRecord(Model, request, response) {
  try {
    let record = await Model.findByPk(request.params.id);
    if (record) {
      Object.entries(request.body).forEach(
        ([name, value]) => (record[name] = value)
      );
      await record.save();
      response.status(204).send();
    } else {
      response.status(404).send();
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

async function deleteRecord(Model, request, response) {
  try {
    let record = await Model.findByPk(request.params.id);
    if (record) {
      await record.destroy();
      response.status(204).send();
    } else {
      response.status(404).send();
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

//----------------SUBRESURSA-------------
//GET
async function getParticipantsForMeeting(Model, request, response) {
  try {
    const meeting = await Model.findByPk(request.params.meetingId, {
      include: [Participant],
    });
    if (meeting.Participants.length) {
      response.status(200).json(meeting);
    } else {
      response.status(202).json({ message: 'error' });
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

// GET ALL MEETINGS AND ALL PARTICIPANTS
async function getAllMeetingsAndParticipants(Model, request, response) {
  try {
    const meetings = await Model.findAll({
      include: [Participant],
    });
    if (meetings) {
      response.status(200).json(meetings);
    } else {
      response.status(202).json();
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

//GET PARTICIPANT BY ID FROM A MEETING BY ID
async function getParticipantByIdForMeetingById(Model, request, response) {
  try {
    const meeting = await Model.findByPk(request.params.meetingId);
    if (meeting) {
      const participants = await meeting.getParticipants({
        idParticipant: request.params.participantId,
      });
      const participant = participants.shift();
      if (participant) {
        response.status(202).json(participant);
      } else {
        response.status(404).json();
      }
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

//DELETE
async function deleteParticipantFromMeeting(Model, request, response) {
  try {
    const meeting = await Model.findByPk(request.params.meetingId);
    if (meeting) {
      const participants = await meeting.getParticipants({
        idParticipant: request.params.participantId,
      });
      const participant = participants.shift();
      if (participant) {
        await participant.destroy();
        response.status(202).json();
      } else {
        response.status(404).json();
      }
    } else {
      response.status(404).json();
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

//PUT (update pe participantul unui anumit meeting)
async function putParticipantForMeeting(Model, request, response) {
  try {
    const meeting = await Model.findByPk(request.params.meetingId);
    if (meeting) {
      const participants = await meeting.getParticipants({
        idParticipant: request.params.participantId,
      });
      const participant = participants.shift();
      if (participant) {
        await participant.update(request.body);
        response.status(202).json();
      } else {
        response.status(404).json();
      }
    } else {
      response.status(404).json();
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

//POST (adauga participant pentru un meeting - creeaza un participant)
async function postParticipantForMeeting(Model, request, response) {
  try {
    const meeting = await Model.findByPk(request.params.meetingId);
    if (meeting) {
      const participant = new Participant(request.body);
      participant.meetingId = meeting.idMeeting;
      await participant.save();
      response.status(201).json();
    } else {
      response.status(404).json();
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

//sortare care functioneaza
async function sortedMeetings(Model, request, response) {
  try {
    const meetings = await Model.findAll();
    if (meetings) {
      const sortedMeetings = meetings.sort((meeting1, meeting2) =>
        meeting1.descriereMeeting > meeting2.descriereMeeting ? 1 : -1
      );
      response.status(200).json(sortedMeetings);
    } else {
      response.status(404).json();
    }
  } catch (error) {
    response.status(500).json(error);
  }
}

export {
  getRecords,
  postRecord,
  deleteRecords,
  getRecord,
  headRecord,
  putRecord,
  patchRecord,
  deleteRecord,
  getParticipantsForMeeting,
  deleteParticipantFromMeeting,
  putParticipantForMeeting,
  postParticipantForMeeting,
  getParticipantByIdForMeetingById,
  sortedMeetings,
  getAllMeetingsAndParticipants,
};
